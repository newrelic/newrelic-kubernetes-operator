// Code generated by counterfeiter. DO NOT EDIT.
package interfacesfakes

import (
	"sync"

	"github.com/newrelic/newrelic-client-go/pkg/alerts"

	"github.com/newrelic/newrelic-kubernetes-operator/interfaces"
)

type FakeNewRelicAlertsClient struct {
	CreateNrqlConditionStub        func(int, alerts.NrqlCondition) (*alerts.NrqlCondition, error)
	createNrqlConditionMutex       sync.RWMutex
	createNrqlConditionArgsForCall []struct {
		arg1 int
		arg2 alerts.NrqlCondition
	}
	createNrqlConditionReturns struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	createNrqlConditionReturnsOnCall map[int]struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	CreatePolicyStub        func(alerts.Policy) (*alerts.Policy, error)
	createPolicyMutex       sync.RWMutex
	createPolicyArgsForCall []struct {
		arg1 alerts.Policy
	}
	createPolicyReturns struct {
		result1 *alerts.Policy
		result2 error
	}
	createPolicyReturnsOnCall map[int]struct {
		result1 *alerts.Policy
		result2 error
	}
	CreatePolicyMutationStub        func(int, alerts.AlertsPolicyInput) (*alerts.AlertsPolicy, error)
	createPolicyMutationMutex       sync.RWMutex
	createPolicyMutationArgsForCall []struct {
		arg1 int
		arg2 alerts.AlertsPolicyInput
	}
	createPolicyMutationReturns struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}
	createPolicyMutationReturnsOnCall map[int]struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}
	DeleteNrqlConditionStub        func(int) (*alerts.NrqlCondition, error)
	deleteNrqlConditionMutex       sync.RWMutex
	deleteNrqlConditionArgsForCall []struct {
		arg1 int
	}
	deleteNrqlConditionReturns struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	deleteNrqlConditionReturnsOnCall map[int]struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	DeletePolicyStub        func(int) (*alerts.Policy, error)
	deletePolicyMutex       sync.RWMutex
	deletePolicyArgsForCall []struct {
		arg1 int
	}
	deletePolicyReturns struct {
		result1 *alerts.Policy
		result2 error
	}
	deletePolicyReturnsOnCall map[int]struct {
		result1 *alerts.Policy
		result2 error
	}
	DeletePolicyMutationStub        func(int, int) (*alerts.AlertsPolicy, error)
	deletePolicyMutationMutex       sync.RWMutex
	deletePolicyMutationArgsForCall []struct {
		arg1 int
		arg2 int
	}
	deletePolicyMutationReturns struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}
	deletePolicyMutationReturnsOnCall map[int]struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}
	GetPolicyStub        func(int) (*alerts.Policy, error)
	getPolicyMutex       sync.RWMutex
	getPolicyArgsForCall []struct {
		arg1 int
	}
	getPolicyReturns struct {
		result1 *alerts.Policy
		result2 error
	}
	getPolicyReturnsOnCall map[int]struct {
		result1 *alerts.Policy
		result2 error
	}
	ListNrqlConditionsStub        func(int) ([]*alerts.NrqlCondition, error)
	listNrqlConditionsMutex       sync.RWMutex
	listNrqlConditionsArgsForCall []struct {
		arg1 int
	}
	listNrqlConditionsReturns struct {
		result1 []*alerts.NrqlCondition
		result2 error
	}
	listNrqlConditionsReturnsOnCall map[int]struct {
		result1 []*alerts.NrqlCondition
		result2 error
	}
	ListPoliciesStub        func(*alerts.ListPoliciesParams) ([]alerts.Policy, error)
	listPoliciesMutex       sync.RWMutex
	listPoliciesArgsForCall []struct {
		arg1 *alerts.ListPoliciesParams
	}
	listPoliciesReturns struct {
		result1 []alerts.Policy
		result2 error
	}
	listPoliciesReturnsOnCall map[int]struct {
		result1 []alerts.Policy
		result2 error
	}
	QueryPolicySearchStub        func(int, alerts.AlertsPoliciesSearchCriteriaInput) ([]*alerts.AlertsPolicy, error)
	queryPolicySearchMutex       sync.RWMutex
	queryPolicySearchArgsForCall []struct {
		arg1 int
		arg2 alerts.AlertsPoliciesSearchCriteriaInput
	}
	queryPolicySearchReturns struct {
		result1 []*alerts.AlertsPolicy
		result2 error
	}
	queryPolicySearchReturnsOnCall map[int]struct {
		result1 []*alerts.AlertsPolicy
		result2 error
	}
	UpdateNrqlConditionStub        func(alerts.NrqlCondition) (*alerts.NrqlCondition, error)
	updateNrqlConditionMutex       sync.RWMutex
	updateNrqlConditionArgsForCall []struct {
		arg1 alerts.NrqlCondition
	}
	updateNrqlConditionReturns struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	updateNrqlConditionReturnsOnCall map[int]struct {
		result1 *alerts.NrqlCondition
		result2 error
	}
	UpdatePolicyStub        func(alerts.Policy) (*alerts.Policy, error)
	updatePolicyMutex       sync.RWMutex
	updatePolicyArgsForCall []struct {
		arg1 alerts.Policy
	}
	updatePolicyReturns struct {
		result1 *alerts.Policy
		result2 error
	}
	updatePolicyReturnsOnCall map[int]struct {
		result1 *alerts.Policy
		result2 error
	}
	UpdatePolicyMutationStub        func(int, int, alerts.AlertsPolicyUpdateInput) (*alerts.AlertsPolicy, error)
	updatePolicyMutationMutex       sync.RWMutex
	updatePolicyMutationArgsForCall []struct {
		arg1 int
		arg2 int
		arg3 alerts.AlertsPolicyUpdateInput
	}
	updatePolicyMutationReturns struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}
	updatePolicyMutationReturnsOnCall map[int]struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlCondition(arg1 int, arg2 alerts.NrqlCondition) (*alerts.NrqlCondition, error) {
	fake.createNrqlConditionMutex.Lock()
	ret, specificReturn := fake.createNrqlConditionReturnsOnCall[len(fake.createNrqlConditionArgsForCall)]
	fake.createNrqlConditionArgsForCall = append(fake.createNrqlConditionArgsForCall, struct {
		arg1 int
		arg2 alerts.NrqlCondition
	}{arg1, arg2})
	fake.recordInvocation("CreateNrqlCondition", []interface{}{arg1, arg2})
	fake.createNrqlConditionMutex.Unlock()
	if fake.CreateNrqlConditionStub != nil {
		return fake.CreateNrqlConditionStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createNrqlConditionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionCallCount() int {
	fake.createNrqlConditionMutex.RLock()
	defer fake.createNrqlConditionMutex.RUnlock()
	return len(fake.createNrqlConditionArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionCalls(stub func(int, alerts.NrqlCondition) (*alerts.NrqlCondition, error)) {
	fake.createNrqlConditionMutex.Lock()
	defer fake.createNrqlConditionMutex.Unlock()
	fake.CreateNrqlConditionStub = stub
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionArgsForCall(i int) (int, alerts.NrqlCondition) {
	fake.createNrqlConditionMutex.RLock()
	defer fake.createNrqlConditionMutex.RUnlock()
	argsForCall := fake.createNrqlConditionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionReturns(result1 *alerts.NrqlCondition, result2 error) {
	fake.createNrqlConditionMutex.Lock()
	defer fake.createNrqlConditionMutex.Unlock()
	fake.CreateNrqlConditionStub = nil
	fake.createNrqlConditionReturns = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreateNrqlConditionReturnsOnCall(i int, result1 *alerts.NrqlCondition, result2 error) {
	fake.createNrqlConditionMutex.Lock()
	defer fake.createNrqlConditionMutex.Unlock()
	fake.CreateNrqlConditionStub = nil
	if fake.createNrqlConditionReturnsOnCall == nil {
		fake.createNrqlConditionReturnsOnCall = make(map[int]struct {
			result1 *alerts.NrqlCondition
			result2 error
		})
	}
	fake.createNrqlConditionReturnsOnCall[i] = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreatePolicy(arg1 alerts.Policy) (*alerts.Policy, error) {
	fake.createPolicyMutex.Lock()
	ret, specificReturn := fake.createPolicyReturnsOnCall[len(fake.createPolicyArgsForCall)]
	fake.createPolicyArgsForCall = append(fake.createPolicyArgsForCall, struct {
		arg1 alerts.Policy
	}{arg1})
	fake.recordInvocation("CreatePolicy", []interface{}{arg1})
	fake.createPolicyMutex.Unlock()
	if fake.CreatePolicyStub != nil {
		return fake.CreatePolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyCallCount() int {
	fake.createPolicyMutex.RLock()
	defer fake.createPolicyMutex.RUnlock()
	return len(fake.createPolicyArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyCalls(stub func(alerts.Policy) (*alerts.Policy, error)) {
	fake.createPolicyMutex.Lock()
	defer fake.createPolicyMutex.Unlock()
	fake.CreatePolicyStub = stub
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyArgsForCall(i int) alerts.Policy {
	fake.createPolicyMutex.RLock()
	defer fake.createPolicyMutex.RUnlock()
	argsForCall := fake.createPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyReturns(result1 *alerts.Policy, result2 error) {
	fake.createPolicyMutex.Lock()
	defer fake.createPolicyMutex.Unlock()
	fake.CreatePolicyStub = nil
	fake.createPolicyReturns = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyReturnsOnCall(i int, result1 *alerts.Policy, result2 error) {
	fake.createPolicyMutex.Lock()
	defer fake.createPolicyMutex.Unlock()
	fake.CreatePolicyStub = nil
	if fake.createPolicyReturnsOnCall == nil {
		fake.createPolicyReturnsOnCall = make(map[int]struct {
			result1 *alerts.Policy
			result2 error
		})
	}
	fake.createPolicyReturnsOnCall[i] = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyMutation(arg1 int, arg2 alerts.AlertsPolicyInput) (*alerts.AlertsPolicy, error) {
	fake.createPolicyMutationMutex.Lock()
	ret, specificReturn := fake.createPolicyMutationReturnsOnCall[len(fake.createPolicyMutationArgsForCall)]
	fake.createPolicyMutationArgsForCall = append(fake.createPolicyMutationArgsForCall, struct {
		arg1 int
		arg2 alerts.AlertsPolicyInput
	}{arg1, arg2})
	fake.recordInvocation("CreatePolicyMutation", []interface{}{arg1, arg2})
	fake.createPolicyMutationMutex.Unlock()
	if fake.CreatePolicyMutationStub != nil {
		return fake.CreatePolicyMutationStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createPolicyMutationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyMutationCallCount() int {
	fake.createPolicyMutationMutex.RLock()
	defer fake.createPolicyMutationMutex.RUnlock()
	return len(fake.createPolicyMutationArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyMutationCalls(stub func(int, alerts.AlertsPolicyInput) (*alerts.AlertsPolicy, error)) {
	fake.createPolicyMutationMutex.Lock()
	defer fake.createPolicyMutationMutex.Unlock()
	fake.CreatePolicyMutationStub = stub
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyMutationArgsForCall(i int) (int, alerts.AlertsPolicyInput) {
	fake.createPolicyMutationMutex.RLock()
	defer fake.createPolicyMutationMutex.RUnlock()
	argsForCall := fake.createPolicyMutationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyMutationReturns(result1 *alerts.AlertsPolicy, result2 error) {
	fake.createPolicyMutationMutex.Lock()
	defer fake.createPolicyMutationMutex.Unlock()
	fake.CreatePolicyMutationStub = nil
	fake.createPolicyMutationReturns = struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) CreatePolicyMutationReturnsOnCall(i int, result1 *alerts.AlertsPolicy, result2 error) {
	fake.createPolicyMutationMutex.Lock()
	defer fake.createPolicyMutationMutex.Unlock()
	fake.CreatePolicyMutationStub = nil
	if fake.createPolicyMutationReturnsOnCall == nil {
		fake.createPolicyMutationReturnsOnCall = make(map[int]struct {
			result1 *alerts.AlertsPolicy
			result2 error
		})
	}
	fake.createPolicyMutationReturnsOnCall[i] = struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlCondition(arg1 int) (*alerts.NrqlCondition, error) {
	fake.deleteNrqlConditionMutex.Lock()
	ret, specificReturn := fake.deleteNrqlConditionReturnsOnCall[len(fake.deleteNrqlConditionArgsForCall)]
	fake.deleteNrqlConditionArgsForCall = append(fake.deleteNrqlConditionArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("DeleteNrqlCondition", []interface{}{arg1})
	fake.deleteNrqlConditionMutex.Unlock()
	if fake.DeleteNrqlConditionStub != nil {
		return fake.DeleteNrqlConditionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteNrqlConditionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionCallCount() int {
	fake.deleteNrqlConditionMutex.RLock()
	defer fake.deleteNrqlConditionMutex.RUnlock()
	return len(fake.deleteNrqlConditionArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionCalls(stub func(int) (*alerts.NrqlCondition, error)) {
	fake.deleteNrqlConditionMutex.Lock()
	defer fake.deleteNrqlConditionMutex.Unlock()
	fake.DeleteNrqlConditionStub = stub
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionArgsForCall(i int) int {
	fake.deleteNrqlConditionMutex.RLock()
	defer fake.deleteNrqlConditionMutex.RUnlock()
	argsForCall := fake.deleteNrqlConditionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionReturns(result1 *alerts.NrqlCondition, result2 error) {
	fake.deleteNrqlConditionMutex.Lock()
	defer fake.deleteNrqlConditionMutex.Unlock()
	fake.DeleteNrqlConditionStub = nil
	fake.deleteNrqlConditionReturns = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeleteNrqlConditionReturnsOnCall(i int, result1 *alerts.NrqlCondition, result2 error) {
	fake.deleteNrqlConditionMutex.Lock()
	defer fake.deleteNrqlConditionMutex.Unlock()
	fake.DeleteNrqlConditionStub = nil
	if fake.deleteNrqlConditionReturnsOnCall == nil {
		fake.deleteNrqlConditionReturnsOnCall = make(map[int]struct {
			result1 *alerts.NrqlCondition
			result2 error
		})
	}
	fake.deleteNrqlConditionReturnsOnCall[i] = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeletePolicy(arg1 int) (*alerts.Policy, error) {
	fake.deletePolicyMutex.Lock()
	ret, specificReturn := fake.deletePolicyReturnsOnCall[len(fake.deletePolicyArgsForCall)]
	fake.deletePolicyArgsForCall = append(fake.deletePolicyArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("DeletePolicy", []interface{}{arg1})
	fake.deletePolicyMutex.Unlock()
	if fake.DeletePolicyStub != nil {
		return fake.DeletePolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyCallCount() int {
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	return len(fake.deletePolicyArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyCalls(stub func(int) (*alerts.Policy, error)) {
	fake.deletePolicyMutex.Lock()
	defer fake.deletePolicyMutex.Unlock()
	fake.DeletePolicyStub = stub
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyArgsForCall(i int) int {
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	argsForCall := fake.deletePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyReturns(result1 *alerts.Policy, result2 error) {
	fake.deletePolicyMutex.Lock()
	defer fake.deletePolicyMutex.Unlock()
	fake.DeletePolicyStub = nil
	fake.deletePolicyReturns = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyReturnsOnCall(i int, result1 *alerts.Policy, result2 error) {
	fake.deletePolicyMutex.Lock()
	defer fake.deletePolicyMutex.Unlock()
	fake.DeletePolicyStub = nil
	if fake.deletePolicyReturnsOnCall == nil {
		fake.deletePolicyReturnsOnCall = make(map[int]struct {
			result1 *alerts.Policy
			result2 error
		})
	}
	fake.deletePolicyReturnsOnCall[i] = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyMutation(arg1 int, arg2 int) (*alerts.AlertsPolicy, error) {
	fake.deletePolicyMutationMutex.Lock()
	ret, specificReturn := fake.deletePolicyMutationReturnsOnCall[len(fake.deletePolicyMutationArgsForCall)]
	fake.deletePolicyMutationArgsForCall = append(fake.deletePolicyMutationArgsForCall, struct {
		arg1 int
		arg2 int
	}{arg1, arg2})
	fake.recordInvocation("DeletePolicyMutation", []interface{}{arg1, arg2})
	fake.deletePolicyMutationMutex.Unlock()
	if fake.DeletePolicyMutationStub != nil {
		return fake.DeletePolicyMutationStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deletePolicyMutationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyMutationCallCount() int {
	fake.deletePolicyMutationMutex.RLock()
	defer fake.deletePolicyMutationMutex.RUnlock()
	return len(fake.deletePolicyMutationArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyMutationCalls(stub func(int, int) (*alerts.AlertsPolicy, error)) {
	fake.deletePolicyMutationMutex.Lock()
	defer fake.deletePolicyMutationMutex.Unlock()
	fake.DeletePolicyMutationStub = stub
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyMutationArgsForCall(i int) (int, int) {
	fake.deletePolicyMutationMutex.RLock()
	defer fake.deletePolicyMutationMutex.RUnlock()
	argsForCall := fake.deletePolicyMutationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyMutationReturns(result1 *alerts.AlertsPolicy, result2 error) {
	fake.deletePolicyMutationMutex.Lock()
	defer fake.deletePolicyMutationMutex.Unlock()
	fake.DeletePolicyMutationStub = nil
	fake.deletePolicyMutationReturns = struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) DeletePolicyMutationReturnsOnCall(i int, result1 *alerts.AlertsPolicy, result2 error) {
	fake.deletePolicyMutationMutex.Lock()
	defer fake.deletePolicyMutationMutex.Unlock()
	fake.DeletePolicyMutationStub = nil
	if fake.deletePolicyMutationReturnsOnCall == nil {
		fake.deletePolicyMutationReturnsOnCall = make(map[int]struct {
			result1 *alerts.AlertsPolicy
			result2 error
		})
	}
	fake.deletePolicyMutationReturnsOnCall[i] = struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) GetPolicy(arg1 int) (*alerts.Policy, error) {
	fake.getPolicyMutex.Lock()
	ret, specificReturn := fake.getPolicyReturnsOnCall[len(fake.getPolicyArgsForCall)]
	fake.getPolicyArgsForCall = append(fake.getPolicyArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("GetPolicy", []interface{}{arg1})
	fake.getPolicyMutex.Unlock()
	if fake.GetPolicyStub != nil {
		return fake.GetPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) GetPolicyCallCount() int {
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	return len(fake.getPolicyArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) GetPolicyCalls(stub func(int) (*alerts.Policy, error)) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = stub
}

func (fake *FakeNewRelicAlertsClient) GetPolicyArgsForCall(i int) int {
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	argsForCall := fake.getPolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) GetPolicyReturns(result1 *alerts.Policy, result2 error) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = nil
	fake.getPolicyReturns = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) GetPolicyReturnsOnCall(i int, result1 *alerts.Policy, result2 error) {
	fake.getPolicyMutex.Lock()
	defer fake.getPolicyMutex.Unlock()
	fake.GetPolicyStub = nil
	if fake.getPolicyReturnsOnCall == nil {
		fake.getPolicyReturnsOnCall = make(map[int]struct {
			result1 *alerts.Policy
			result2 error
		})
	}
	fake.getPolicyReturnsOnCall[i] = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) ListNrqlConditions(arg1 int) ([]*alerts.NrqlCondition, error) {
	fake.listNrqlConditionsMutex.Lock()
	ret, specificReturn := fake.listNrqlConditionsReturnsOnCall[len(fake.listNrqlConditionsArgsForCall)]
	fake.listNrqlConditionsArgsForCall = append(fake.listNrqlConditionsArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("ListNrqlConditions", []interface{}{arg1})
	fake.listNrqlConditionsMutex.Unlock()
	if fake.ListNrqlConditionsStub != nil {
		return fake.ListNrqlConditionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listNrqlConditionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) ListNrqlConditionsCallCount() int {
	fake.listNrqlConditionsMutex.RLock()
	defer fake.listNrqlConditionsMutex.RUnlock()
	return len(fake.listNrqlConditionsArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) ListNrqlConditionsCalls(stub func(int) ([]*alerts.NrqlCondition, error)) {
	fake.listNrqlConditionsMutex.Lock()
	defer fake.listNrqlConditionsMutex.Unlock()
	fake.ListNrqlConditionsStub = stub
}

func (fake *FakeNewRelicAlertsClient) ListNrqlConditionsArgsForCall(i int) int {
	fake.listNrqlConditionsMutex.RLock()
	defer fake.listNrqlConditionsMutex.RUnlock()
	argsForCall := fake.listNrqlConditionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) ListNrqlConditionsReturns(result1 []*alerts.NrqlCondition, result2 error) {
	fake.listNrqlConditionsMutex.Lock()
	defer fake.listNrqlConditionsMutex.Unlock()
	fake.ListNrqlConditionsStub = nil
	fake.listNrqlConditionsReturns = struct {
		result1 []*alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) ListNrqlConditionsReturnsOnCall(i int, result1 []*alerts.NrqlCondition, result2 error) {
	fake.listNrqlConditionsMutex.Lock()
	defer fake.listNrqlConditionsMutex.Unlock()
	fake.ListNrqlConditionsStub = nil
	if fake.listNrqlConditionsReturnsOnCall == nil {
		fake.listNrqlConditionsReturnsOnCall = make(map[int]struct {
			result1 []*alerts.NrqlCondition
			result2 error
		})
	}
	fake.listNrqlConditionsReturnsOnCall[i] = struct {
		result1 []*alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) ListPolicies(arg1 *alerts.ListPoliciesParams) ([]alerts.Policy, error) {
	fake.listPoliciesMutex.Lock()
	ret, specificReturn := fake.listPoliciesReturnsOnCall[len(fake.listPoliciesArgsForCall)]
	fake.listPoliciesArgsForCall = append(fake.listPoliciesArgsForCall, struct {
		arg1 *alerts.ListPoliciesParams
	}{arg1})
	fake.recordInvocation("ListPolicies", []interface{}{arg1})
	fake.listPoliciesMutex.Unlock()
	if fake.ListPoliciesStub != nil {
		return fake.ListPoliciesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPoliciesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) ListPoliciesCallCount() int {
	fake.listPoliciesMutex.RLock()
	defer fake.listPoliciesMutex.RUnlock()
	return len(fake.listPoliciesArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) ListPoliciesCalls(stub func(*alerts.ListPoliciesParams) ([]alerts.Policy, error)) {
	fake.listPoliciesMutex.Lock()
	defer fake.listPoliciesMutex.Unlock()
	fake.ListPoliciesStub = stub
}

func (fake *FakeNewRelicAlertsClient) ListPoliciesArgsForCall(i int) *alerts.ListPoliciesParams {
	fake.listPoliciesMutex.RLock()
	defer fake.listPoliciesMutex.RUnlock()
	argsForCall := fake.listPoliciesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) ListPoliciesReturns(result1 []alerts.Policy, result2 error) {
	fake.listPoliciesMutex.Lock()
	defer fake.listPoliciesMutex.Unlock()
	fake.ListPoliciesStub = nil
	fake.listPoliciesReturns = struct {
		result1 []alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) ListPoliciesReturnsOnCall(i int, result1 []alerts.Policy, result2 error) {
	fake.listPoliciesMutex.Lock()
	defer fake.listPoliciesMutex.Unlock()
	fake.ListPoliciesStub = nil
	if fake.listPoliciesReturnsOnCall == nil {
		fake.listPoliciesReturnsOnCall = make(map[int]struct {
			result1 []alerts.Policy
			result2 error
		})
	}
	fake.listPoliciesReturnsOnCall[i] = struct {
		result1 []alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) QueryPolicySearch(arg1 int, arg2 alerts.AlertsPoliciesSearchCriteriaInput) ([]*alerts.AlertsPolicy, error) {
	fake.queryPolicySearchMutex.Lock()
	ret, specificReturn := fake.queryPolicySearchReturnsOnCall[len(fake.queryPolicySearchArgsForCall)]
	fake.queryPolicySearchArgsForCall = append(fake.queryPolicySearchArgsForCall, struct {
		arg1 int
		arg2 alerts.AlertsPoliciesSearchCriteriaInput
	}{arg1, arg2})
	fake.recordInvocation("QueryPolicySearch", []interface{}{arg1, arg2})
	fake.queryPolicySearchMutex.Unlock()
	if fake.QueryPolicySearchStub != nil {
		return fake.QueryPolicySearchStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.queryPolicySearchReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) QueryPolicySearchCallCount() int {
	fake.queryPolicySearchMutex.RLock()
	defer fake.queryPolicySearchMutex.RUnlock()
	return len(fake.queryPolicySearchArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) QueryPolicySearchCalls(stub func(int, alerts.AlertsPoliciesSearchCriteriaInput) ([]*alerts.AlertsPolicy, error)) {
	fake.queryPolicySearchMutex.Lock()
	defer fake.queryPolicySearchMutex.Unlock()
	fake.QueryPolicySearchStub = stub
}

func (fake *FakeNewRelicAlertsClient) QueryPolicySearchArgsForCall(i int) (int, alerts.AlertsPoliciesSearchCriteriaInput) {
	fake.queryPolicySearchMutex.RLock()
	defer fake.queryPolicySearchMutex.RUnlock()
	argsForCall := fake.queryPolicySearchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNewRelicAlertsClient) QueryPolicySearchReturns(result1 []*alerts.AlertsPolicy, result2 error) {
	fake.queryPolicySearchMutex.Lock()
	defer fake.queryPolicySearchMutex.Unlock()
	fake.QueryPolicySearchStub = nil
	fake.queryPolicySearchReturns = struct {
		result1 []*alerts.AlertsPolicy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) QueryPolicySearchReturnsOnCall(i int, result1 []*alerts.AlertsPolicy, result2 error) {
	fake.queryPolicySearchMutex.Lock()
	defer fake.queryPolicySearchMutex.Unlock()
	fake.QueryPolicySearchStub = nil
	if fake.queryPolicySearchReturnsOnCall == nil {
		fake.queryPolicySearchReturnsOnCall = make(map[int]struct {
			result1 []*alerts.AlertsPolicy
			result2 error
		})
	}
	fake.queryPolicySearchReturnsOnCall[i] = struct {
		result1 []*alerts.AlertsPolicy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlCondition(arg1 alerts.NrqlCondition) (*alerts.NrqlCondition, error) {
	fake.updateNrqlConditionMutex.Lock()
	ret, specificReturn := fake.updateNrqlConditionReturnsOnCall[len(fake.updateNrqlConditionArgsForCall)]
	fake.updateNrqlConditionArgsForCall = append(fake.updateNrqlConditionArgsForCall, struct {
		arg1 alerts.NrqlCondition
	}{arg1})
	fake.recordInvocation("UpdateNrqlCondition", []interface{}{arg1})
	fake.updateNrqlConditionMutex.Unlock()
	if fake.UpdateNrqlConditionStub != nil {
		return fake.UpdateNrqlConditionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateNrqlConditionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionCallCount() int {
	fake.updateNrqlConditionMutex.RLock()
	defer fake.updateNrqlConditionMutex.RUnlock()
	return len(fake.updateNrqlConditionArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionCalls(stub func(alerts.NrqlCondition) (*alerts.NrqlCondition, error)) {
	fake.updateNrqlConditionMutex.Lock()
	defer fake.updateNrqlConditionMutex.Unlock()
	fake.UpdateNrqlConditionStub = stub
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionArgsForCall(i int) alerts.NrqlCondition {
	fake.updateNrqlConditionMutex.RLock()
	defer fake.updateNrqlConditionMutex.RUnlock()
	argsForCall := fake.updateNrqlConditionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionReturns(result1 *alerts.NrqlCondition, result2 error) {
	fake.updateNrqlConditionMutex.Lock()
	defer fake.updateNrqlConditionMutex.Unlock()
	fake.UpdateNrqlConditionStub = nil
	fake.updateNrqlConditionReturns = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdateNrqlConditionReturnsOnCall(i int, result1 *alerts.NrqlCondition, result2 error) {
	fake.updateNrqlConditionMutex.Lock()
	defer fake.updateNrqlConditionMutex.Unlock()
	fake.UpdateNrqlConditionStub = nil
	if fake.updateNrqlConditionReturnsOnCall == nil {
		fake.updateNrqlConditionReturnsOnCall = make(map[int]struct {
			result1 *alerts.NrqlCondition
			result2 error
		})
	}
	fake.updateNrqlConditionReturnsOnCall[i] = struct {
		result1 *alerts.NrqlCondition
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicy(arg1 alerts.Policy) (*alerts.Policy, error) {
	fake.updatePolicyMutex.Lock()
	ret, specificReturn := fake.updatePolicyReturnsOnCall[len(fake.updatePolicyArgsForCall)]
	fake.updatePolicyArgsForCall = append(fake.updatePolicyArgsForCall, struct {
		arg1 alerts.Policy
	}{arg1})
	fake.recordInvocation("UpdatePolicy", []interface{}{arg1})
	fake.updatePolicyMutex.Unlock()
	if fake.UpdatePolicyStub != nil {
		return fake.UpdatePolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updatePolicyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyCallCount() int {
	fake.updatePolicyMutex.RLock()
	defer fake.updatePolicyMutex.RUnlock()
	return len(fake.updatePolicyArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyCalls(stub func(alerts.Policy) (*alerts.Policy, error)) {
	fake.updatePolicyMutex.Lock()
	defer fake.updatePolicyMutex.Unlock()
	fake.UpdatePolicyStub = stub
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyArgsForCall(i int) alerts.Policy {
	fake.updatePolicyMutex.RLock()
	defer fake.updatePolicyMutex.RUnlock()
	argsForCall := fake.updatePolicyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyReturns(result1 *alerts.Policy, result2 error) {
	fake.updatePolicyMutex.Lock()
	defer fake.updatePolicyMutex.Unlock()
	fake.UpdatePolicyStub = nil
	fake.updatePolicyReturns = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyReturnsOnCall(i int, result1 *alerts.Policy, result2 error) {
	fake.updatePolicyMutex.Lock()
	defer fake.updatePolicyMutex.Unlock()
	fake.UpdatePolicyStub = nil
	if fake.updatePolicyReturnsOnCall == nil {
		fake.updatePolicyReturnsOnCall = make(map[int]struct {
			result1 *alerts.Policy
			result2 error
		})
	}
	fake.updatePolicyReturnsOnCall[i] = struct {
		result1 *alerts.Policy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyMutation(arg1 int, arg2 int, arg3 alerts.AlertsPolicyUpdateInput) (*alerts.AlertsPolicy, error) {
	fake.updatePolicyMutationMutex.Lock()
	ret, specificReturn := fake.updatePolicyMutationReturnsOnCall[len(fake.updatePolicyMutationArgsForCall)]
	fake.updatePolicyMutationArgsForCall = append(fake.updatePolicyMutationArgsForCall, struct {
		arg1 int
		arg2 int
		arg3 alerts.AlertsPolicyUpdateInput
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdatePolicyMutation", []interface{}{arg1, arg2, arg3})
	fake.updatePolicyMutationMutex.Unlock()
	if fake.UpdatePolicyMutationStub != nil {
		return fake.UpdatePolicyMutationStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updatePolicyMutationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyMutationCallCount() int {
	fake.updatePolicyMutationMutex.RLock()
	defer fake.updatePolicyMutationMutex.RUnlock()
	return len(fake.updatePolicyMutationArgsForCall)
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyMutationCalls(stub func(int, int, alerts.AlertsPolicyUpdateInput) (*alerts.AlertsPolicy, error)) {
	fake.updatePolicyMutationMutex.Lock()
	defer fake.updatePolicyMutationMutex.Unlock()
	fake.UpdatePolicyMutationStub = stub
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyMutationArgsForCall(i int) (int, int, alerts.AlertsPolicyUpdateInput) {
	fake.updatePolicyMutationMutex.RLock()
	defer fake.updatePolicyMutationMutex.RUnlock()
	argsForCall := fake.updatePolicyMutationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyMutationReturns(result1 *alerts.AlertsPolicy, result2 error) {
	fake.updatePolicyMutationMutex.Lock()
	defer fake.updatePolicyMutationMutex.Unlock()
	fake.UpdatePolicyMutationStub = nil
	fake.updatePolicyMutationReturns = struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) UpdatePolicyMutationReturnsOnCall(i int, result1 *alerts.AlertsPolicy, result2 error) {
	fake.updatePolicyMutationMutex.Lock()
	defer fake.updatePolicyMutationMutex.Unlock()
	fake.UpdatePolicyMutationStub = nil
	if fake.updatePolicyMutationReturnsOnCall == nil {
		fake.updatePolicyMutationReturnsOnCall = make(map[int]struct {
			result1 *alerts.AlertsPolicy
			result2 error
		})
	}
	fake.updatePolicyMutationReturnsOnCall[i] = struct {
		result1 *alerts.AlertsPolicy
		result2 error
	}{result1, result2}
}

func (fake *FakeNewRelicAlertsClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createNrqlConditionMutex.RLock()
	defer fake.createNrqlConditionMutex.RUnlock()
	fake.createPolicyMutex.RLock()
	defer fake.createPolicyMutex.RUnlock()
	fake.createPolicyMutationMutex.RLock()
	defer fake.createPolicyMutationMutex.RUnlock()
	fake.deleteNrqlConditionMutex.RLock()
	defer fake.deleteNrqlConditionMutex.RUnlock()
	fake.deletePolicyMutex.RLock()
	defer fake.deletePolicyMutex.RUnlock()
	fake.deletePolicyMutationMutex.RLock()
	defer fake.deletePolicyMutationMutex.RUnlock()
	fake.getPolicyMutex.RLock()
	defer fake.getPolicyMutex.RUnlock()
	fake.listNrqlConditionsMutex.RLock()
	defer fake.listNrqlConditionsMutex.RUnlock()
	fake.listPoliciesMutex.RLock()
	defer fake.listPoliciesMutex.RUnlock()
	fake.queryPolicySearchMutex.RLock()
	defer fake.queryPolicySearchMutex.RUnlock()
	fake.updateNrqlConditionMutex.RLock()
	defer fake.updateNrqlConditionMutex.RUnlock()
	fake.updatePolicyMutex.RLock()
	defer fake.updatePolicyMutex.RUnlock()
	fake.updatePolicyMutationMutex.RLock()
	defer fake.updatePolicyMutationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNewRelicAlertsClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ interfaces.NewRelicAlertsClient = new(FakeNewRelicAlertsClient)
